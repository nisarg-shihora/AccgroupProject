https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/junit-tutorial JUnit Tutorial | Testing Framework for java - javatpoint ? SCROLL TO TOP Home Python Java JavaScript HTML SQL PHP C# C++ DS Aptitude Reasoning Selenium DBMS C Android Interview Q JUnit Tutorial JUnit 4 Tutorial JUnit Tutorial | Testing Framework for Java JUnit tutorial provides basic and advanced concepts of unit testing in java with examples. Our junit tutorial is designed for beginners and professionals. It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code. It is one of the unit testing framework. Current version is junit 4. To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected. The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc. Types of unit testing There are two ways to perform unit testing: 1) manual testing 2) automated testing. 1) Manual Testing If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable. 2) Automated Testing If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable. Annotations for Junit testing The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases. @Test annotation specifies that method is the test method. @Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second). @BeforeClass annotation specifies that method will be invoked only once, before starting all the tests. @Before annotation specifies that method will be invoked before each test. @After annotation specifies that method will be invoked after each test. @AfterClass annotation specifies that method will be invoked only once, after finishing all the tests. Assert class The org.junit.Assert class provides methods to assert the program logic. Methods of Assert class The common methods of Assert class are as follows: void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded. void assertTrue(boolean condition): checks that a condition is true. void assertFalse(boolean condition): checks that a condition is false. void assertNull(Object obj): checks that object is null. void assertNotNull(Object obj): checks that object is not null. Required jar files You need to load junit4.jar and hamcrest-core.jar files. download the junit jar files Simple JUnit example in eclipse IDE Let's see the directory structure of this example. Write the program logic Let's write the logic to find the maximum number for an array. 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 Write the test case Here, we are using JUnit 4, so there is no need to inherit TestCase class. The main testing code is written in the testFindMax() method. But we can also perform some task before and after each test, as you can see in the given program. 
package com.javatpoint.testcase;

import static org.junit.Assert.*;
import com.javatpoint.logic.*;
import org.junit.Test;

public class TestLogic {

	@Test
	public void testFindMax(){
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-1,Calculation.findMax(new int[]{-12,-1,-3,-4,-2}));
	}
}

 download this example To run this example, right click on TestLogic class -> Run As -> 1Junit Test. Output:Assertion Error
 Let's see the output displayed in eclipse IDE. As you can see, when we pass the negative values, it throws AssertionError because second time findMax() method returns 0 instead of -1. It means our program logic is incorrect. Correct program logic As you can see, program logic to find the maximum number for the given array is not correct because it doesn't return -1 in case of negative values. The correct program logic is given below: 
package com.javatpoint.logic;
public class Calculation {

	public static int findMax(int arr[]){
		int max=arr[0];//arr[0] instead of 0
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
}
 If you run the junit program again, you will see the following output. Another example of Junit framework Write the program code 
package com.javatpoint.logic;
public class Calculation {
	//method that returns maximum number
	public static int findMax(int arr[]){
		int max=0;
		for(int i=1;i<arr.length;i++){
			if(max<arr[i])
				max=arr[i];
		}
		return max;
	}
	//method that returns cube of the given number
	public static int cube(int n){
		return n*n*n;
	}
	//method that returns reverse words 
	public static String reverseWord(String str){

		StringBuilder result=new StringBuilder();
		StringTokenizer tokenizer=new StringTokenizer(str," ");

		while(tokenizer.hasMoreTokens()){
		StringBuilder sb=new StringBuilder();
		sb.append(tokenizer.nextToken());
		sb.reverse();

		result.append(sb);
		result.append(" ");
		}
		return result.toString();
	}
}
 Write the test case 
package com.javatpoint.testcase;

import static org.junit.Assert.assertEquals;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.javatpoint.logic.Calculation;

public class TestCase2 {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		System.out.println("before class");
	}
	@Before
	public void setUp() throws Exception {
		System.out.println("before");
	}

	@Test
	public void testFindMax(){
		System.out.println("test case find max");
		assertEquals(4,Calculation.findMax(new int[]{1,3,4,2}));
		assertEquals(-2,Calculation.findMax(new int[]{-12,-3,-4,-2}));
	}
	@Test
	public void testCube(){
		System.out.println("test case cube");
		assertEquals(27,Calculation.cube(3));
	}
	@Test
	public void testReverseWord(){
		System.out.println("test case reverse word");
		assertEquals("ym eman si nahk",Calculation.reverseWord("my name is khan");
	}
	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		System.out.println("after class");
	}

}

 Output:before class
       before
       test case find max
       after
       before
       test case cube
       after
       before
       test case reverse word
       after
       after class
 download this example For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.