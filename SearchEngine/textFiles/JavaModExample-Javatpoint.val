https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-mod-example Java Mod Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java Mod Example In Java, mod (or modulo) is an operator that is used to determine the remainder. Java provides Math.floorMod() method that can be used instead of a modulo (or modulus) operation and % operator to perform the remainder operation. Here, a point to note is that they act the same when the numbers are positive but much differently when the numbers are negative. In sort, Remainder = The result has the same sign (+ or -) as the dividend. Modulo = The result has the same sign (+ or -) as the divisor. Remainder.java 
import java.util.Arrays;
import java.util.List;
public class Remainder
{
public static void main(String args[]) 
{
int divisor = 3, div=-3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d rem %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend : list) 
{
String result = String.format(format, dividend, divisor, dividend % divisor);
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend : list) 
{
String result1 = String.format(format, dividend, div, dividend % div);
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 rem 3 = 0
 -5 rem 3 = -2
 -4 rem 3 = -1
 -3 rem 3 = 0
 -2 rem 3 = -2
 -1 rem 3 = -1
  0 rem 3 = 0
  1 rem 3 = 1
  2 rem 3 = 2
  3 rem 3 = 0
  4 rem 3 = 1
  5 rem 3 = 2
  6 rem 3 = 0

When Divisor is -3: 
 -6 rem -3 = 0
 -5 rem -3 = -2
 -4 rem -3 = -1
 -3 rem -3 = 0
 -2 rem -3 = -2
 -1 rem -3 = -1
  0 rem -3 = 0
  1 rem -3 = 1
  2 rem -3 = 2
  3 rem -3 = 0
  4 rem -3 = 1
  5 rem -3 = 2
  6 rem -3 = 0
 Modulo.java 
import java.util.Arrays;
import java.util.List;
public class Modulo
{
public static void main(String args[]) 
{
int divisor = 3, div = -3;
List<Integer> list = Arrays.asList(-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6);
//defining format to print on the console
String format = "%3d mod %1d = %2d";
System.out.println("When Divisor is 3: ");
//loop iterates over the List
for (Integer dividend: list) 
{
String result = String.format(format, dividend, divisor, Math.floorMod(dividend,divisor));
//prints remainder when divisor is 3
System.out.println(result);
}
System.out.println("\nWhen Divisor is -3: ");
for (Integer dividend: list) 
{
String result1 = String.format(format, dividend, div, Math.floorMod(dividend,div));
//prints remainder when divisor is -3
System.out.println(result1);
}
}
}
 Output: When Divisor is 3: 
 -6 mod 3 = 0
 -5 mod 3 = 1
 -4 mod 3 = 2
 -3 mod 3 = 0
 -2 mod 3 = 1
 -1 mod 3 = 2
  0 mod 3 = 0
  1 mod 3 = 1
  2 mod 3 = 2
  3 mod 3 = 0
  4 mod 3 = 1
  5 mod 3 = 2
  6 mod 3 = 0

When Divisor is -3: 
 -6 mod -3 = 0
 -5 mod -3 = -2
 -4 mod -3 = -1
 -3 mod -3 = 0
 -2 mod -3 = -2
 -1 mod -3 = -1
  0 mod -3 = 0
  1 mod -3 = -2
  2 mod -3 = -1
  3 mod -3 = 0
  4 mod -3 = -2
  5 mod -3 = -1
  6 mod -3 = 0
 Using Math.floorMod() Method The Java Math class provides the floorMod() method to determine the modulo of an integer argument. The method accepts two parameters (dividend and divisor) of type int. The method returns the floor modulus x - (floorDiv(x, y) * y). Syntax: 
public static int floorMod(int x, int y)
 The method throws ArithmaticException if the divisor (y) is 0. Note that the floor modulus has the same sign as the divisor y and is in the range of -abs(y) < r < +abs(y). The floorMod() and floorDiv() has the following relationship. 
floorDiv(x, y) * y + floorMod(x, y) == x
 Also, note that floorMod() and % operator are not the same, there is a slight difference between them. The difference is due to floorDiv() method because it returns an integer less than or equal to the quotient and the operator returns the integer closest to zero. Remember: If both the arguments have the same sign, the result of floorMod() method and % operator are the same. If both the arguments have different signs, the result floorMod() method and % operator will be different. For example, consider the following: floorMod(5, 2) == 1; and (5 % 2) == 1 floorMod(+5, -2) == -1; and (+5 % -2) == 1 floorMod(-5, +2) == 1; and (-5 % +2) == -1 floorMod(-5, -2) == -1; and (-5 % -2) == -1 If the sign of arguments is unknown and we required a positive modulus, we can use the following statement. 
(floorMod(x, y) + abs(y)) % abs(y)
 FloorModExample.java 
public class FloorModExample 
{
public static void main(String args[]) 
{
//dividend
int a = 3;
//divisor 
int b = -2;
//prints remainder
System.out.println("3 % -2 = "+a % b);
//prints floor modulus 
System.out.println("floorMod(3, -2) = "+Math.floorMod(a, b));
}
}
 Output: 3 % -2 = 1
floorMod(3, -2) = -1
 Note: Which one to choose, remainder % or modulo Math.floorMod(). It depends on what we are going to build; both act the same for positive numbers but remember to take care of the negative result to avoid the common drawbacks as we discussed above. Therefore, we can conclude that mod and remainder are not the same. Next TopicStone Game in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.