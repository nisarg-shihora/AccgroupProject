https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected]javatpoint.com. Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/peak-index-of-mountain-array-problem-in-java Peak Index of Mountain Array Problem in Java - javatpoint ? SCROLL TO TOP Home Coding Problems Java Programs OOPs String Exception Multithreading Collections Coding Problems Candy Distribution Problem in Java Find Rectangle in a Matrix with Corner as 1 in Java Minimum Number of Taps to Open to Water a Garden in Java Seven Segment Display Problem in Java Split Array Largest Sum in Java Find Original Array from a Double Array in Java Minimum Lights to Activate Problem in Java Rotate List in Java Count of Range Sum Problem in Java Create A Tree of Coprime in Java Convert Integer to Roman Numerals in Java Check if n and its Double Exist or not in Java Array of Doubled Pair Problem in Java Tag Content Extractor Problem in Java Convert Roman to Integer in Java Minimum Number of Flips to Convert Binary Matrix into Zero Matrix in Java XOR of Array Elements Except Itself in Java Check If the Given Array is Mirror Inverse in Java How to Create a Mirror Image of A 2D Array in Java Add Numbers Represented by Linked Lists in Java Majority Element In an Array in Java Block Swap Algorithm or Array Rotation in Java Minimum Difference Among Group Size Two in Java Missing Number in An Arithmetic Progression in Java Peak Index of Mountain Array Problem in Java next ? ? prev Peak Index of Mountain Array Problem in Java It is a very interesting problem frequently asked in interviews of top IT companies like Google, Amazon, TCS, Accenture, Adobe, Apple, Infosys, etc. By solving the problem, one wants to check the logical ability, critical thinking, and problem-solving skill of the interviewee. So, in this section, we are going to find the peak index of mountain array in Java with different approaches and logic. Also, we will create Java programs for the same. Problem Statement An array is said to be a mountain array if it satisfies the following conditions: The length of the given array is should be greater or equal to 3 i.e. LENGTH >=3. There must be only one peak in the array or the largest element in the array. The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1] The task is to find the peak index of the mountain array. Suppose we have given the input [60, 20, 90, 110, 10]. The output will be 3. Because the largest element in the array is 110 whose index is 3. Solution to the Problem The problem can be solved using the following two approaches: Using Binary Search Using Linear Search Let's discuss the above approaches one by one. Using Binary Search The elements in the given array must be in either ascending or descending sorted order. There should not be duplicate elements. Using the binary search algorithm, we can find out the required element. In this approach, at every step reduce the search by half. The problem can be solved by using the following steps: Find the middle element of the array arr. If the array is arranged in descending order (arr[mid]>arr[mid+1]), it means the peak element will be on the left side of the middle element. Therefore, reduce the search between the left half and the middle If the array is arranged in ascending order (arr[mid+1]<arr[mid]), it means the peak element will be on the right side of the middle element. Therefore, reduce the search between the right element and the middle+1 Repeat step 2 and 3, recursively until the condition left<right become false. When the condition left >= right becomes true, the peak element will be at the left index. Example Suppose the input array is {4, 2, 7, 9, 8, 3, 1}. The length of the array will be array length-1, i.e. 7-1 = 6. Therefore, High=6 and Low=0 Let's find the mid of the array. Mid=low+(high-low)/2 Mid=0+(6-0)/2 = 3 Now check if (array[mid]>=array[mid+1]) or not Therefore, 9 >= 8, the condition is true. Set high=Mid Now, low=0, Mid=3, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 0 + (3 - 0) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Now, low=1+1=2, Mid=1, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 2 + (3 - 2) / 2 = 2 Now check if (array[mid]>=array[mid+1]) Therefore, 7 >= 9, the condition is false. Set low=Mid+1 Now, low=2+1=3, Mid=2, High=3 Again, find the mid of the array Mid=low+(high-low)/2 Mid = 3 + (3 - 3) / 2 = 1 Now check if (array[mid]>=array[mid+1]) Therefore, 2 >= 7, the condition is false. Set low=Mid+1 Repeat the above process. At last we get low=3, High=3, Mid=3; And here when it comes in loop while (low < high), means 3< 3 and the condition becomes false. Exit from the loop and return low i.e. 3. Hence, the peak index become 3. Algorithm Set low = 0. Set high to the length of array -1. Declare a variable mid. Set mid = low + (high - low) / 2. While low < high: If array[ mid ] > = array [ mid + 1]. then high = mid. Else then low = mid + 1. Return low. Let's implement the above algorithm in the Java program. Java Program to Find the Peak Index of Mountain Array In this approach, we are going to use a binary search. We have defined a function named findPeakIndex() in which we have passed the input array and the length of an array. We have declared a variable named mid and initialized it to 0 and a variable named high which is equal to high-1. Inside a while loop, we have defined a condition low < high. The condition will execute until it returns false. Entering in a loop we set mid=low+(high-low) / 2. GetPeakIndex.java 
public class GetPeakIndex 
{
//user-defined function that finds the peak index of the mountain array
public static int findPeakIndex(int[] array) 
{
int low = 0;
int high = array.length - 1;
int mid;
while (low<high) 
{
mid = low + (high - low) / 2;
//compares mid of the array with the next element
if (array[mid] >= array[mid + 1]) 
{
//if the above condition is true, sets high=mid    
high = mid;
} 
//if the condition becomes false array[mid] >= array[mid + 1] sets low=mid+1
else 
{
low = mid + 1;
}
}
return low;
}
//driver code
public static void main(String args[]) 
{
int mountainArray[] = {4, 2, 7, 9, 8, 3, 1};
//function calling
int peakindex = findPeakIndex(mountainArray);
//prints the peak index of the mountain array
System.out.println("The peak index of the mountain array is: " + peakindex);
}
}
 Output: The peak index of the mountain array is: 3
 Using Linear Search In this approach, we iterate through the given input array A. At each iteration, if the current element is greater than the previous element and the current element is smaller than the next element then the current element is the peak element. Let's implement the above approach in a Java program. PeakIndex.java 
public class PeakIndex
{
public static void main(String args[]) 
{        
PeakIndex pi= new PeakIndex();
int index = pi.findPeakIndex(new int[] {4, 6, 9, 11, 45, 40, 20, 1});
System.out.println("The peak index of the mountain array is: " + index);                       
}
//user-defined function that finds the peak index of the mountain array
public int findPeakIndex(int[] A) 
{
if(A == null || A.length <3) return -1;
int previous = A[0];
for(int i=1; i<A.length-1; i++)
{            
if(previous < A[i] && A[i+1] < A[i])
{
return i;
}
}
return -1;
}
}
 Output: The peak index of the mountain array is: 4
 Complexity The time complexity of the above solution is O(log n) where n is the length of the array. The space complexity is O(1) because we have not used any extra space for calculation. Next Topic# ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.