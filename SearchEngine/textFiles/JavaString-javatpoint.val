https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/string-handling-in-java Java String - javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Basics of Java OOPs Concepts Java String What is String Immutable String String Comparison String Concatenation Substring Methods of String class StringBuffer class StringBuilder class String vs StringBuffer StringBuffer vs Builder Creating Immutable class toString method StringTokenizer class Java String FAQs String Handling quiz-1 Java String Methods String charAt() String compareTo() String concat() String contains() String endsWith() String equals() equalsIgnoreCase() String format() String getBytes() String getChars() String indexOf() String intern() String isEmpty() String join() String lastIndexOf() String length() String replace() String replaceAll() String split() String startsWith() String substring() String toCharArray() String toLowerCase() String toUpperCase() String trim() String valueOf() Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java New Features RMI Internationalization Interview Questions next ? Java String In Java, string is basically an object that represents sequence of char values. An array of characters works same as Java string. For example: 
char[] ch={'j','a','v','a','t','p','o','i','n','t'};
String s=new String(ch);
 is same as: 
String s="javatpoint";
 Java String class provides a lot of methods to perform operations on strings such as compare(), concat(), equals(), split(), length(), replace(), compareTo(), intern(), substring() etc. The java.lang.String class implements Serializable, Comparable and CharSequence interfaces. CharSequence Interface The CharSequence interface is used to represent the sequence of characters. String, StringBuffer and StringBuilder classes implement it. It means, we can create strings in Java by using these three classes. The Java String is immutable which means it cannot be changed. Whenever we change any string, a new instance is created. For mutable strings, you can use StringBuffer and StringBuilder classes. We will discuss immutable string later. Let's first understand what String in Java is and how to create the String object. What is String in Java? Generally, String is a sequence of characters. But in Java, string is an object that represents a sequence of characters. The java.lang.String class is used to create a string object. How to create a string object? There are two ways to create String object: By string literal By new keyword 1) String Literal Java String literal is created by using double quotes. For Example: 
String s="welcome";
 Each time you create a string literal, the JVM checks the "string constant pool" first. If the string already exists in the pool, a reference to the pooled instance is returned. If the string doesn't exist in the pool, a new string instance is created and placed in the pool. For example: 
String s1="Welcome";
String s2="Welcome";//It doesn't create a new instance
 In the above example, only one object will be created. Firstly, JVM will not find any string object with the value "Welcome" in string constant pool that is why it will create a new object. After that it will find the string with the value "Welcome" in the pool, it will not create a new object but will return the reference to the same instance. Note: String objects are stored in a special memory area known as the "string constant pool". Why Java uses the concept of String literal? To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool). 2) By new keyword 
String s=new String("Welcome");//creates two objects and one reference variable
 In such case, JVM will create a new string object in normal (non-pool) heap memory, and the literal "Welcome" will be placed in the string constant pool. The variable s will refer to the object in a heap (non-pool). Java String Example StringExample.java 
public class StringExample{  
public static void main(String args[]){  
String s1="java";//creating string by Java string literal  
char ch[]={'s','t','r','i','n','g','s'};  
String s2=new String(ch);//converting char array to string  
String s3=new String("example");//creating Java string by new keyword  
System.out.println(s1);  
System.out.println(s2);  
System.out.println(s3);  
}}  
 Test it Now Output: java
strings
example
 The above code, converts a char array into a String object. And displays the String objects s1, s2, and s3 on console using println() method. Java String class methods The java.lang.String class provides many useful methods to perform operations on sequence of char values. No. Method Description 1 char charAt(int index) It returns char value for the particular index 2 int length() It returns string length 3 static String format(String format, Object... args) It returns a formatted string. 4 static String format(Locale l, String format, Object... args) It returns formatted string with given locale. 5 String substring(int beginIndex) It returns substring for given begin index. 6 String substring(int beginIndex, int endIndex) It returns substring for given begin index and end index. 7 boolean contains(CharSequence s) It returns true or false after matching the sequence of char value. 8 static String join(CharSequence delimiter, CharSequence... elements) It returns a joined string. 9 static String join(CharSequence delimiter, Iterable<? extends CharSequence> elements) It returns a joined string. 10 boolean equals(Object another) It checks the equality of string with the given object. 11 boolean isEmpty() It checks if string is empty. 12 String concat(String str) It concatenates the specified string. 13 String replace(char old, char new) It replaces all occurrences of the specified char value. 14 String replace(CharSequence old, CharSequence new) It replaces all occurrences of the specified CharSequence. 15 static String equalsIgnoreCase(String another) It compares another string. It doesn't check case. 16 String[] split(String regex) It returns a split string matching regex. 17 String[] split(String regex, int limit) It returns a split string matching regex and limit. 18 String intern() It returns an interned string. 19 int indexOf(int ch) It returns the specified char value index. 20 int indexOf(int ch, int fromIndex) It returns the specified char value index starting with given index. 21 int indexOf(String substring) It returns the specified substring index. 22 int indexOf(String substring, int fromIndex) It returns the specified substring index starting with given index. 23 String toLowerCase() It returns a string in lowercase. 24 String toLowerCase(Locale l) It returns a string in lowercase using specified locale. 25 String toUpperCase() It returns a string in uppercase. 26 String toUpperCase(Locale l) It returns a string in uppercase using specified locale. 27 String trim() It removes beginning and ending spaces of this string. 28 static String valueOf(int value) It converts given type into string. It is an overloaded method. Do You Know? Why are String objects immutable? How to create an immutable class? What is string constant pool? What code is written by the compiler if you concatenate any string by + (string concatenation operator)? What is the difference between StringBuffer and StringBuilder class? What will we learn in String Handling? Concept of String Immutable String String Comparison String Concatenation Concept of Substring String class methods and its usage StringBuffer class StringBuilder class Creating Immutable class toString() method StringTokenizer class Next TopicImmutable String next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.