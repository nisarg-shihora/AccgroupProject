https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/processbuilder-in-java ProcessBuilder in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev ProcessBuilder in Java The class ProcessBuilder is used to create the operating system process in Java. The collection of process attributes is managed by each instance of the ProcessBuilder class. The ProcessBuilder class cannot be synchronized. Prior to JDK 5.0, it was the Runtime.exec() method that was used to create the process and execute it. Note that the ProcessBuilder class extends the Object class. Constructors of The ProcessBuilder Class ProcessBuilder(List command): It does the construction of the process builder with the mentioned arguments and operating system program. ProcessBuilder(String… command): It also does the construction of the process builder with the mentioned arguments and operating system program. Methods of The ProcessBuilder Class 1. List Command(): The method returns the arguments and the process builder's operating system program. Syntax: public List command(). Returns: the arguments and the process builder's program. Exceptions: Gives the NullPointerException whenever the argument is null. FileName: ProcessBuilderDemo.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// check the command list
System.out.println("command: " + bld.command());
}
}
 Output: command: [notepad++.exe]
 2. ProcessBuilder directory(File directory): The method sets the working directory of the process builder. The subprocesses invoked by the start() method utilize it as the working directory. Syntax: public ProcessBuilder directory(File directory). Returns: The process builder. Exception: NA. FileName: ProcessBuilderDemo1.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo1 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// setting up the directory
bld.directory(new File("src"));
// checking the directory, on which currently
// working on
System.out.println("directory: " + bld.directory());
}
}
 Output: directory: src
 3. Map environment(): The string map view of the environment of the process builder's is returned by this method. The environment gets initialized with a copy of the current process environment when the process builder is created. Syntax: public Map environment() Returns: The environment of the process builder's. Exception: SecurityException - if a security manager is in existence and its method checkPermission() does not give permission to access the process environment. FileName: ProcessBuilderDemo2.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo2
{
// main method
public static void main(String[] argvs) throws IOException
{
// creating an object of the ProcessBuilder class
ProcessBuilder pbObj = new ProcessBuilder();
// The process builder's environment map view
Map<String, String> enMap = pbObj.environment();
// check environment of the map view
for (Map.Entry<String, String> en :
enMap.entrySet()) 
{
// check separately key and value
System.out.println("Key = " + en.getKey()
+ ", Value = "
+ en.getValue());
}
}
}
 Output: Key = USERDOMAIN_ROAMINGPROFILE, Value = DESKTOP-2CFH9HQ
Key = LOCALAPPDATA, Value = C:\Users\Nikhil\AppData\Local
Key = PROCESSOR_LEVEL, Value = 6
Key = USERDOMAIN, Value = DESKTOP-2CFH9HQ
Key = FPS_BROWSER_APP_PROFILE_STRING, Value = Internet Explorer
Key = LOGONSERVER, Value = \\DESKTOP-2CFH9HQ
Key = PROMPT, Value = $P$G
Key = SESSIONNAME, Value = Console
Key = ALLUSERSPROFILE, Value = C:\ProgramData
Key = =K:, Value = K:\
Key = PROCESSOR_ARCHITECTURE, Value = AMD64
Key = PSModulePath, Value = C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
Key = SystemDrive, Value = C:
Key = =ExitCode, Value = 00000000
Key = OneDrive, Value = C:\Users\Nikhil\OneDrive
Key = APPDATA, Value = C:\Users\Nikhil\AppData\Roaming
Key = USERNAME, Value = Nikhil
Key = ProgramFiles(x86), Value = C:\Program Files (x86)
Key = CommonProgramFiles, Value = C:\Program Files\Common Files
Key = Path, Value = C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Java\jdk-11.0.13\bin
Key = FPS_BROWSER_USER_PROFILE_STRING, Value = Default
Key = PATHEXT, Value = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
Key = OS, Value = Windows_NT
Key = COMPUTERNAME, Value = DESKTOP-2CFH9HQ
Key = PROCESSOR_REVISION, Value = 8e09
Key = CommonProgramW6432, Value = C:\Program Files\Common Files
Key = ComSpec, Value = C:\Windows\system32\cmd.exe
Key = ProgramData, Value = C:\ProgramData
Key = ProgramW6432, Value = C:\Program Files
Key = HOMEPATH, Value = \Users\Nikhil
Key = SystemRoot, Value = C:\Windows
Key = TEMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = HOMEDRIVE, Value = C:
Key = PROCESSOR_IDENTIFIER, Value = Intel64 Family 6 Model 142 Stepping 9, GenuineIntel
Key = USERPROFILE, Value = C:\Users\Nikhil
Key = TMP, Value = C:\Users\Nikhil\AppData\Local\Temp
Key = CommonProgramFiles(x86), Value = C:\Program Files (x86)\Common Files
Key = ProgramFiles, Value = C:\Program Files
Key = PUBLIC, Value = C:\Users\Public
Key = NUMBER_OF_PROCESSORS, Value = 4
Key = windir, Value = C:\Windows
Key = =::, Value = ::\
 Note: The above output is the dynamic one. It is because the output varies from one user to other user depending on the system the user is using. 4. boolean redirectErrorStream(): The method returns a Boolean value showing whether the process builder merges standard output and standard error. If the method redirectErrorStream() returns true, then any error output generated by the subprocesses subsequently initiated by the start() method gets merged with the standard output so that both can be read using the Process.getInputStream() method. The method makes it simpler to do the correlation of the error messages with the corresponding output. Note that the beginning value is false for the property redirectErrorStream. Syntax: public boolean redirectErrorStream() Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo3.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo3 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: false
 5. ProcessBuilder redirectErrorStream(boolean redirectErrorStream): The method assigns the redirectErrorStream property of the process builder's. If the property redirectErrorStream is true, then any error produced by the subsequent subprocesses begun by the start() method gets merged with the standard. The initial value is false. Syntax: public boolean redirectErrorStream(boolean redirectErrorStream) Returns: A Boolean value. Exception: NA. FileName: ProcessBuilderDemo4.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo4 
{
// main method
public static void main(String[] argvs) throws IOException
{
// create the process list
List<String> lst = new ArrayList<String>();
lst.add("notepad++.exe");
lst.add("xyz.txt");
// create the process
ProcessBuilder bld = new ProcessBuilder(lst);
// the error stream is redirected
bld.redirectErrorStream(true);
// checking whether the error stream is 
// redirected or not
System.out.println(bld.redirectErrorStream());
}
}
 Output: true
 6. Process start(): The method begins a new process with the help of the attributes of the process builder. The new process invokes the arguments and command provided by command(), in the working directory provided by directory(), with the process environment provided by the environment(). The method checks whether the command compatible with the operating system or not. Syntax: public Process start(). Returns: a new Process object for managing the subprocess. Exception: NullPointerException - If an element of the command list is null. IndexOutOfBoundsException - If the command is an empty list (has size 0). SecurityException - If a security manager exists and its checkExec method does not allow the creation of the subprocess. IOException - If an I/O error occurs. FileName: ProcessBuilderDemo5.java 
// important import statements
import java.util.*;
import java.io.*;
import java.lang.*;
public class ProcessBuilderDemo5
{
public static void main(String[] argvs) throws IOException
{
// making the commands list
List<String> cmds = new ArrayList<String>();
cmds.add("cmd.exe"); //command
cmds.add("/c"); //command
cmds.add("dir"); //command
// create the process
ProcessBuilder bld = new ProcessBuilder(cmds);
bld.directory(new File("C:\\Users\\Nikhil\\Downloads\\March Month Content"));
// process starts
Process prcs = bld.start();
// reading from the stream
BufferedReader stdInput = new BufferedReader(new InputStreamReader(prcs.getInputStream()));
String str = null;
while ((str = stdInput.readLine()) != null) 
{
// displaying the output on the console
System.out.println(str);
}
}
}
 Output: Volume in drive C has no label.
Volume Serial Number is E44F-AA1A

 Directory of C:\Users\Nikhil\Downloads\March Month Content

04/02/2022  12:53 PM    <DIR>          .
04/02/2022  12:53 PM    <DIR>          ..
03/07/2022  02:16 AM            72,341 Arithmetic Exception in Java.docx
04/01/2022  07:50 PM            75,092 Balanced Prime in Java.docx
03/04/2022  12:06 AM            72,984 Comparetoignorecase Java.docx
03/07/2022  02:16 AM            67,015 Difference between ArrayList and LinkedList.docx
03/18/2022  10:29 PM            88,850 Display the nodes at odd levels of a tree.docx
04/01/2022  06:49 PM            68,855 Empty Statement in Java.docx
03/07/2022  02:13 AM            75,014 Iccanobif Numbers in Java.docx
03/22/2022  05:43 PM            82,319 Java HashSet.docx
03/29/2022  06:43 PM            77,242 Java LinkedHashSet class.docx
03/26/2022  05:06 AM            87,274 Maximum Rectangular Area in a Histogram.docx
04/01/2022  06:59 PM            75,088 Minimum Coins for Making a Given Value in Java.docx
03/07/2022  02:27 AM            77,622 Minimum Xor Value Pair in Java.docx
03/18/2022  10:24 PM            70,371 Nude Numbers in Java.docx
03/03/2022  01:21 AM            69,562 Trimorphic Numbers in Java.docx
03/28/2022  06:23 PM            86,764 Two Sorted LinkedList Intersection in Java.docx
              15 File(s)      1,146,393 bytes
               2 Dir(s)  13,788,762,112 bytes free
 6. ProcessBuilder inheritIO(): Sets the destination and source for standard I/O subprocess same for the current Java process. Syntax: public ProcessBuilder inheritIO(). Returns: The process builder. Exception: NA. FileName: myBat.bat 
@echo off
echo "Welcome To JavaTpoint. A great site to Learn Java."
cmd /k
 FileName: ProcessBuilderDemo6.java 
// important import statements
import java.io.*;
import java.util.*;
public class ProcessBuilderDemo6
{
// main method
public static void main(String[] argvs) throws IOException, InterruptedException
{
// creating an object the class ProcessBuilder
ProcessBuilder pBldr = new ProcessBuilder("myBat.bat");
// Invoking the inheritIO() method causes the 
// output of the myBat.bat files to come in the process Java System.out.
// and the process's System.in link to the batch input file.
pBldr.inheritIO();
Process prcs = pBldr.start();
prcs.waitFor();
}
}
 Output: "Welcome To JavaTpoint. A great site to Learn Java.
 Next TopicHow to Clear Java Cache ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.