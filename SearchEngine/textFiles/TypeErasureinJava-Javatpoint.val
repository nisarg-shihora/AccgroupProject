https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/typeerasure-in-java TypeErasure in Java - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev TypeErasure in Java The concept of Generic has been introduced in the Java language in order to facilitate tighter checks of types at the compile time and to support generic programming. In order to implement generics, the compiler of Java applies the type erasure to: Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes. Inserting the type casts if required in order to support the type safety. Generating the bridge methods for preserving polymorphism in generic types that are extended. Generally, generic code that is compiled just utilizes the java.lang.Object whenever one talks about P (or some different type parameter) - and there is some information (metadata), which tells the Java compiler that it is a generic type. Whenever one compiles the code against the method or generic type, the Java compiler deciphers what the person really means (that is, the compiler finds out the type argument for P) and validates at the compile-time that one is doing the correct thing or not. However, the code that is emitted again does talk in terms of the java.lang.Object - the Java compiler produces the extra casts where needed. At the execution time, a List and a List are the same. The Java compiler erases the extra type information. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure<P> 
{
// Here, P gets replaced by the default, 
// that is the Object
P object;
// constructor of the class
TypeErasure(P o)
{
object = o;
}
// retrieving the object
P getObject()
{
return object;
}
}
 After the compilation, the type parameter P is replaced by the default Object. Observe the following program. 
// Here, P is getting bounded by the Object i.e., the java.lang.Object
public class TypeErasure 
{
// Here, P gets replaced by the default, 
// that is the Object
Object object;
// constructor of the class
TypeErasure(Object o)
{
object = o;
}
// retrieving the object
Object getObject()
{
return object;
}
}
 Let's take another example, where the type parameter P extends the java.lang.String class. 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 <P extends String> 
{
// Here, P gets replaced by the String 
// that is the Object
P s;
// constructor of the class
TypeErasure1(P o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 After the compilation, we get 
// Here, P is getting bounded by the Object, i.e., the java.lang.String
public class TypeErasure1 
{
// Here, P gets replaced by the String 
// that is the Object
String s;
// constructor of the class
TypeErasure1(String o)
{
s = o;
}
// retrieving the object
Object getObject()
{
return s;
}
}
 Implementation of TypeErasure Let's see an example of the implementation of TypeErasure. FileName: TypeErasure2.java 
// important import statements
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
public class TypeErasure2
{
public static void main(String args[])
{
// creating a list for storing the stings
List<String> lst = new ArrayList<String>();
// adding strings to the list
lst.add("Hello");
lst.add("World");
Iterator<String> itr = lst.iterator();
// iterating through the elements
// of the list
while (itr.hasNext()) 
{
String str = itr.next();
System.out.println(str);
}
}
}
 Output: Hello
World
 Explanation: Here, when the code is compiled, no warning is issued by the compiler. It is due to Type Erasure. Now, observe the following program. FileName: TypeErasure3.java 
// important import statements
import java.util.*;
import java.io.PrintStream;
public class TypeErasure3
{
// constructor of the class
public TypeErasure3()
{
}
// main method
public static void main(String args[])
{
List list = new ArrayList();
list.add("Hello");
list.add("World");
String s;
for (Iterator iter = list.iterator(); iter.hasNext();
System.out.println(s))
s = (String)iter.next();
}
}
 When we compile the above program using the javac command, we get the following warning. It is because of the type erasure as it is not mentioned in the program about the type of list that is being used. Note: TypeErasure3.java uses unchecked or unsafe operations. Recompile with -Xlint:unchecked for details. Output still remains the same. Output: Hello
World
 Next TopicHow to Remove substring from String in Java ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.