https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.https://www.javatpoint.com/java-processbuilder-example Java ProcessBuilder Example - Javatpoint ? SCROLL TO TOP Home Java Programs OOPs String Exception Multithreading Collections JavaFX JSP Spring Spring Boot Projects Interview Questions Java Tutorial What is Java History of Java Features of Java C++ vs Java Hello Java Program Program Internal How to set path? JDK, JRE and JVM JVM: Java Virtual Machine Java Variables Java Data Types Unicode System Operators Keywords Control Statements Java Control Statements Java If-else Java Switch Java For Loop Java While Loop Java Do While Loop Java Break Java Continue Java Comments Java Programs Java Object Class Java OOPs Concepts Naming Convention Object and Class Method Constructor static keyword this keyword Java Inheritance Inheritance(IS-A) Aggregation(HAS-A) Java Polymorphism Method Overloading Method Overriding Covariant Return Type super keyword Instance Initializer block final keyword Runtime Polymorphism Dynamic Binding instanceof operator Java Abstraction Abstract class Interface Abstract vs Interface Java Encapsulation Package Access Modifiers Encapsulation Java Array Java Array Java OOPs Misc Object class Object Cloning Math class Wrapper Class Java Recursion Call By Value strictfp keyword javadoc tool Command Line Arg Object vs Class Overloading vs Overriding Java String Java Regex Exception Handling Java Inner classes Java Multithreading Java I/O Java Networking Java AWT & Events Java Swing JavaFX Java Applet Java Reflection Java Date Java Conversion Java Collection Java JDBC Java Misc Java New Features RMI Internationalization Interview Questions Java MCQ next ? ? prev Java ProcessBuilder Example The Java.lang.ProcessBuilder class is one of the most important classes that is used for creating OS(Operating System) processes. A set of process attributes are managed by each ProcessBuilder instance. The ProcessBuilder class provides the start() method for creating an instance of a new process with those process attributes. We can repeatedly invoke the start() method by using the same instance of the ProcessBuilder class for creating new subprocesses with the same or related attributes. The ProcessBuilder class provide the following two constructors: ProcessBuilder(List command) The constructor creates an instance of the process builder with the given OS program and arguments. ProcessBuilder(String… command) The constructor creates an instance of the process builder with the given OS program and arguments. The ProcessBuilder class provide the following methods, which are as follows: List<String> command() The command() method is used for getting the process builder's operating system program and arguments. Syntax 
public List command()
 Returns It returns the current process builder's program and its arguments. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of ProcessBuilder in Java. ProcessBuilderExample1.java 
// import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
// create class ProcessBuilderExample1 to understand the use of command() method
class ProcessBuilderExample1 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder command(List<String> command) The command() method is used for setting the current process builder's operating system program and arguments. Syntax 
public ProcessBuilder command(List command)
 Parameters It accepts a list of strings that contain the program and its arguments. Returns NA. Exceptions It may throw NullPointerException when the argument is null. Let's take an example to understand how we can use the command() method of process builder in Java. ProcessBuilderExample2.java 
//import required classes and package if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample2 to understand the use of the command(List commands) method
class ProcessBuilderExample2 {
	// main() method start
	public static void main(String[] arg) throws IOException
	{
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder();
		build.command(list);
		// show the command list
		System.out.println("command: " + build.command());
	}
}
 Output: ProcessBuilder directory (File directory) The directory() method is another important method of ProcessBuilder that is used to set the current process builder's directory. The user-given directory is used as a working directory by the sub-processes subsequently started by the start() method of the object. Syntax 
public ProcessBuilder directory(File directory)
 Parameters It accepts the new working directory. Returns It returns the current process builder. Let's take an example to understand how we can use the directory() method of ProcessBuilder in Java. ProcessBuilderExample3.java 
//import required classes and package if any
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample3 to understand the use of the directory(File dir) method
class ProcessBuilderExample3 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// use directory() method for setting the working directory
        	build.directory(new File("src"));
        	// show the command list
        	System.out.println("command: " + build.command());
        	// the directory() method has no argument is used to get the directory, on which currently working on
        	System.out.println("directory: "+ build.directory());
	}
}
 Output: Map environment() It returns a String map that defines the view of the process builder's environment. The environment is initialized to a copy of the current process environment when the process builder is created. The returned map of the environment() method is used as a working directory by the sub-processes, subsequently started by the start() method of the object. Syntax 
public Map environment()
 Returns It returns the environment of the current process builder. Exception It may throw the SecurityException when the security manager exists, and its checkPermission method doesn't allow access to the process. Let's take an example to understand how we can use the environment() method of ProcessBuilder in Java. ProcessBuilderExample4.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//create class ProcessBuilderExample4 to understand the use of the environment() method
class ProcessBuilderExample4 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use the environment() method to get the map that defines the view of the current process builder's environment
        		Map<String, String> environmentMap = build.environment();
        		// show key-value of the environment map using for
        		for (Map.Entry<String, String> data : environmentMap.entrySet()) {
        			System.out.println("Key = " + data.getKey()+ ", Value = "+ data.getValue());
        		}
	}
}
 Output: ProcessBuilder redirectErrorStream(boolean redirectErrorStream) The redirectErrorStream() method is used for setting the current process builder's redirectErrorStream property. If this property is true, any error output generated by subprocesses subsequently started by this object's start() method will be merged with the standard output so that both can be read using the process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false. Syntax 
ProcessBuilder redirectErrorStream(boolean redirectErrorStream)
 Returns It returns the current process builder. Exception NA. ProcessBuilderExample5.java 
//import required classes and package, if any
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample5 to understand the use of the redirectErrorStream() method
class ProcessBuilderExample5 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		list.add("test.txt");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		// show the command list
		System.out.println("command: " + build.command());
		// use redirectErrorStream() method to redirect the error stream
		build.redirectErrorStream(true);
        	// use redirectErrorStream() method to check whether the error stream is redirected or not
        	System.out.println(build.redirectErrorStream());
	}
}
 Output: Process start() The start() method of ProcessBuilder is used to start a new process by using the attribute of the process builder. The new process will invoke the command and arguments given by command() in a working directory as given by directory(), with an environment as given by environment(). Syntax 
public Process start()
 Returns A new Process object to manage the sub-process. Exception The start() method may throw one of the following exceptions: It may throw NullPointerException when an element of the command list is null. It may throw IndexOutOfBoundsException when the command is an empty list. It may throw SecurityException when a security manager exists, and its checkExec methods don't allow the creation of a subprocess. It may throw IOException when an I/O error occurs. ProcessBuilderExample6.java 
//import required classes and package, if any
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample6 to understand the use of the start() method
class ProcessBuilderExample6 {
	// main() method start
	public static void main(String[] arg) throws IOException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create in an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//starting process
		Process process = build.start();
		// read output from the stream
		BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
		// create a null string 
		String s = null;
		// use readLine() for printing output
		while ((s = reader.readLine()) != null) {
			System.out.println(s);
		}
	}
}
 Output: ProcessBuilder inheritIO() The inheritIO() method is used to set the source and destination to the subprocess's standard I/O to be the same as those of the current java process. Syntax 
public ProcessBuilder inheritIO()
 Returns Current process builder Exception NA. ProcessBuilderExample7.java 
//import required classes and package if any
package JavaTpoint.Examples;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
//create class ProcessBuilderExample7 to understand the use of the inheritIO() method
class ProcessBuilderExample7 {
	// main() method start
	public static void main(String[] arg) throws IOException, InterruptedException {
		// create an empty list of String and add process in it
		List<String> list = new ArrayList<String>();
		list.add("notepad.exe");
		// create an instance of ProcessBuilder
		ProcessBuilder build = new ProcessBuilder(list);
		//call inheritIO() method
		build.inheritIO();
		// start process builder
        Process process = build.start();
        // call waitFor() method of Process
        process.waitFor();
	}
}
 Output: Next TopicJava Program to Delete a Directory ? prev next ? For Videos Join Our Youtube Channel: Join Now Feedback Send your Feedback to [email protected] Help Others, Please Share Learn Latest Tutorials Splunk SPSS Swagger Transact-SQL Tumblr ReactJS Regex Reinforcement Learning R Programming RxJS React Native Python Design Patterns Python Pillow Python Turtle Keras Preparation Aptitude Reasoning Verbal Ability Interview Questions Company Questions Trending Technologies Artificial Intelligence AWS Selenium Cloud Computing Hadoop ReactJS Data Science Angular 7 Blockchain Git Machine Learning DevOps B.Tech / MCA DBMS Data Structures DAA Operating System Computer Network Compiler Design Computer Organization Discrete Mathematics Ethical Hacking Computer Graphics Software Engineering Web Technology Cyber Security Automata C Programming C++ Java .Net Python Programs Control System Data Mining Data Warehouse Javatpoint Services JavaTpoint offers too many high quality services. Mail us on [email protected], to get more information about given services. Website Designing Website Development Java Development PHP Development WordPress Graphic Designing Logo Digital Marketing On Page and Off Page SEO PPC Content Development Corporate Training Classroom and Online Training Data Entry Training For College Campus JavaTpoint offers college campus training on Core Java, Advance Java, .Net, Android, Hadoop, PHP, Web Technology and Python. Please mail your requirement at [email protected] Duration: 1 week to 2 week Like/Subscribe us for latest updates or newsletter Learn TutorialsLearn JavaLearn Data StructuresLearn C ProgrammingLearn C++ TutorialLearn C# TutorialLearn PHP TutorialLearn HTML TutorialLearn JavaScript TutorialLearn jQuery TutorialLearn Spring Tutorial Our WebsitesJavatpoint.comHindi100.comLyricsia.comQuoteperson.comJobandplacement.com Our Services Website Development Android Development Website Designing Digital Marketing Summer Training Industrial Training College Campus Training Contact Address: G-13, 2nd Floor, Sec-3 Noida, UP, 201301, India Contact No: 0120-4256464, 9990449935Contact Us Subscribe Us Privacy PolicySitemap About Me © Copyright 2011-2021 www.javatpoint.com. All rights reserved. Developed by JavaTpoint.